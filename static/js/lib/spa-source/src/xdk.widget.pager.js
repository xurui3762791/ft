/** * XDK.widget.pager - 分页组件 * init - XDK.widget.pager.getInstance(options);*/XDK.register("widget.pager", function(J){	return J.Class.create({		_init_ : function(options){			this.set = $.extend({									pageDataContainer : "#page-container .page-data",								pageBar : "#page-container .page-bar",								page : 1,								records : null,									offset : 8,								cut : [2, 2],								beforeGet : function(){					this.pageDataContainer.html("<div class='loading-data'>正在载入......</div>");				},								getPageData : function(p, onResponse){					$.get("api/widget_pager.php", {						page : p,						_ : Math.random()					}, function(data){						onResponse(data);					}, "json");				},								renderDataList : function(list){					var html = "";					if(list.length > 0){						html += "<ul>";						$.each(list, function(a, b){							html += "<li>" + b.title + "</li>";						});						html += "</ul>";					};					return html;				},								onDataListRendered : function(list, html){														},								onErrorState : function(state){									this.pageBar.hide();					this.pageDataContainer.html("<div class='loading-data'>加载失败！</div>");				},								onNoRecords : function(){					this.pageDataContainer.html("<div class='loading-data'>没有数据！</div>");				},								getFirst : function(p, pageCount, offset, records){										return  p > 1 ?  "<span><a href='#' onclick='return false;' _page='1'>首页</a></span>" : "<span class='disabled'>首页</span>";				},								getPrev : function(p, pageCount, offset, records){					return p > 1 ? "<span class='prev'><a _page='" + (p - 1) + "' onclick='return false;' href='#' ></a></span>" : "<span class='prev disabled'></span>";				},								getMiddle : function(p, pageCount, offset, records){					var html = "";					var left = "";					var current = "<span class='active'>" + p + "</span>";					var right = "";					var cut = this.set.cut;					var cutLeft = parseInt(cut[0]);					var cutRight = parseInt(cut[1]);					var startPage = p - cutLeft;					var endPage = p + cutRight;										if(startPage <= 0){						startPage = 1;						endPage = 1 + cutLeft + cutRight;					};										if(endPage > pageCount){						endPage = pageCount;						startPage = pageCount - cutLeft - cutRight;					};										if(startPage > 1){						left += "<span><a href='#' _page='1' onclick='return false;'>1</a></span><i>...</i>";					};										for(var i = startPage, l = p ; i < l; i++){						if( i > 0){							left += "<span><a href='#' onclick='return false;' _page='" + i + "'>" + i + "</a></span>";							};					};					 										for(var i = p + 1, l = endPage ; i <= l; i++){						if(i <= pageCount){							right += "<span><a href='#' onclick='return false;' _page='" + i + "'>" + i + "</a></span>";							};					};					 					if(endPage < pageCount){												right += "<i>...</i><span><a href='#' onclick='return false;' _page='" + pageCount + "'>" + pageCount + "</a></span>";					};					return left + current + right;				},								getNext : function(p, pageCount, offset, records){					return p + 1 <= pageCount ? "<span class='next'><a href='#' _page='" + (p + 1) + "' onclick='return false;'></a></span>" : "<span class='next disabled'></span>";				},								getLast : function(p, pageCount, offset, records){					return p != pageCount && pageCount != 0 ? "<span class='last'><a href='#' _page='" + (pageCount) + "' onclick='return false;'>末页</a></span>" : "<span class='last disabled'>末页</span>";				}			}, options);			this.pageDataContainer = $(this.set.pageDataContainer);			this.pageBar = this.set.pageBar != null ? $(this.set.pageBar) : null;			this.currentPage = parseInt(this.set.page) > 0 ? parseInt(this.set.page) : 1;			this.offset = parseInt(this.set.offset);			this.records = this.set.records;			 			this.pageCount = 0;			this.dataList = [];			if(this.pageBar !== null){				this.get(this.currentPage);			};		},		_getInstance_ : function(options){			return new this(options);		},				bind : function(){			var _this = this;			this.unbind();			this.pageBar.find("a[_page]").click(function(){				var node = $(this);				var page = parseInt(node.attr("_page"));				if(page > 0){					_this.get(page);				};			});		},						unbind : function(){			this.pageBar.find("a[_page]").unbind();		},				render : function(list){			var html = this.set.renderDataList.call(this, list, this);			this.pageDataContainer.html(html);			this.set.onDataListRendered.call(this, list, html);		},						get : function(page){			var _this = this;			this.currentPage = parseInt(page);			this.set.beforeGet.call(this, this);			if(this.records != null){				this.renderPageBar();				this.set.getPageData(page, function(data){					var state = data.state;					var list = data.data;					if(state == 1){						_this.dataList = data.data;						_this.records = parseInt(data.records);						_this.pageCount = (_this.records % _this.offset == 0) ? (_this.records / _this.offset) : parseInt(_this.records / _this.offset) + 1;						_this.renderPageBar();						_this.render(data.data);						_this.onNoRecords();					}else{						_this.onErrorState(state);					};				});			}else{				this.set.getPageData(page, function(data){					var state = data.state;					var list = data.data;					if(state == 1){						_this.dataList = data.data;						_this.records = parseInt(data.records);						_this.pageCount = (_this.records % _this.offset == 0) ? (_this.records / _this.offset) : parseInt(_this.records / _this.offset) + 1;						if(_this.currentPage > _this.pageCount){							_this.currentPage = 1; 						};						_this.renderPageBar();						_this.render(data.data);						_this.onNoRecords();					}else{						_this.onErrorState(state);											};				});			};		},				reload : function(page){			this.get(typeof(page) != "undefined" ? page : this.currentPage);		},						renderPageBar : function(){			if(this.records == 0){				this.pageBar.hide();				}else{				this.pageBar.show();			};			this.unbind();			this.pageBar.html(this.getPageBarHtml());			this.bind();		},						onErrorState : function(state){			this.set.onErrorState.call(this, state);		},						onNoRecords : function(){			if(this.records == 0){				this.set.onNoRecords.call(this);			};		},						getPageBarHtml : function(){			var set = this.set;			var p = this.currentPage;			var records = this.records;			var pageCount = this.pageCount;			var offset = this.offset;			var html = "<div class='page-bar-con fix'>" + 				set.getFirst.call(this, p, pageCount, offset, records) + 				set.getPrev.call(this, p, pageCount, offset, records) + 				set.getMiddle.call(this, p, pageCount, offset, records) + 				set.getNext.call(this, p, pageCount, offset, records) + 				set.getLast.call(this, p, pageCount, offset, records) + 			"</div>";			return html;		},				_debug_error : function(err){			console.log("Error : " + err);		}	});});/** * XDK.widget.pager.get - get方式获取分页数据 * init - XDK.widget.pager.get.getInstance(); * extend - XDK.widget.pager */XDK.register("widget.pager.get", function(J){	var cls = J.Class.create({		_init_ : function(options){			var set = $.extend({				url : null			}, options);			if(set.url == null){				this._debug_error("param - url cannot null!");				return;			};			set.getPageData = function(page, onResponse){				var url = XDK.core.router.getURL(XDK.core.str.render(set.url, {					page : page				}));				$.get(url, {_ : Math.random()}, function(data){					onResponse(data);				}, "json");			};			cls.baseConstructor.call(this, set);		},		_getInstance_ : function(options){			return new this(options);		}	}, XDK.widget.pager);	return cls;	});XDK.register("widget.pager.post", function(J){	var cls = J.Class.create({		_init_ : function(options){			var set = $.extend({				url : null,				extra_post_params : {},				page_param : "page"			}, options);			if(set.url == null){				this._debug_error("param - url cannot null!");				return;			};			var post = {};			$.each(set.extra_post_params, function(a, b){				post[a] = b;			});			set.getPageData = function(page, onResponse){				post[set.page_param] = page;				$.post(set.url, post, function(data){					onResponse(data);				}, "json");			};			cls.baseConstructor.call(this, set);				},		_getInstance_ : function(options){			return new this(options);		}	}, XDK.widget.pager);	return cls;});XDK.register("widget.pager.static", function(J){	var cls = J.Class.create({		_init_ : function(options){			var set = $.extend({				offset : 5,				getPageData : function(page, onResponse){					onResponse({						state : 1,						data : [							{title : "title-1"},							{title : "title-2"},							{title : "title-3"},							{title : "title-4"},							{title : "title-5"}						],						records : 100					});				},				renderDataList : function(list, o){					var html = "";					if(list.length > 0){						$.each(list, function(a, b){							html += "<div><strong>page : " + o.currentPage + ", " + b.title + "</strong></div>";						});					};					return html;				}											}, options);			cls.baseConstructor.call(this, set);		},		_getInstance_ : function(options){			return new this(options);		}	}, XDK.widget.pager);	return cls;});